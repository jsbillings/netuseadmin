#!/usr/bin/python
################################################################################
#
# NETUSEADMIN
#
################################################################################
# Author:
#      Christopher W. Heyer
#
# History:
#      12/5/96 bgkuhn:   Initial release
#      6/27/13 cwheyer:  Rewrote and updated in python
#
################################################################################
# Import modules, set server characteristics, and define machine class
import socket, time, optparse, readline

server = 'netuse.engin.umich.edu'
port = 1680
down_interval = 900

class machine(object):
    def __init__(self,field):
        field = field + ' : : : : : : : : : : : : : : : :'
        field = field.split(':')
        self.host = field[0]
        self.plat = field[1]
        self.disp = field[9]
        try: 
            self.time = float(field[14])
        except ValueError:
            self.time = 0
        if self.time > (time.time() - down_interval):
            self.status = 'Up'
        else:
            self.status = 'Down'
        self.loc = field[12]
        self.model = field[2]
        self.ipadd = field[15]
        if field[11] == 'L':
            field[11] = 'Lab'
        elif field[11] == 'P':
            field[11] = 'Private'
        else:
            field[11] = 'Unknown'
        self.ctype = field[11]

################################################################################
# Help function
#
# Usage:       help()
#
# Purpose:     To display command line options
#
################################################################################
def Help():
    print """
\n--------------------------------------------------------------------------------
Commands:

add       <hostname> <vendor> <model> L|P  Add a new host to the database
delete    <hostname>                       Delete a host from the database
location  <hostname> [<room>] <building>   Set the location for a host
list      [<vendor>] [L|P] [options]       List hosts

reload                                     Load hosts from NETUSE hostfile
savestate                                  Store host list in NETUSE hostfile
use       <filename>                       Read commands from a file

?, help                                    Display this help text
exit, quit                                 Exit the program
"""
    print 'All commands and arguments EXCEPT hostnames are case-insensitive.'
    print '-' * 80
    print

################################################################################
# Request function
#
# Usage:       request(req)
#
# Purpose:     To send a Netuse Administrative command to and receive data
#              from the Netuse server.
#
# Arguments:   The request to be sent to the Netuse server
#
# Returns:     String of raw data received from the Netuse server
#
################################################################################
def request(req):
    try: 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect ((server, port))
        sock.sendall(req)
        data = sock.recv(50000)
        while 1:
            buff = sock.recv(50000)
            if len(buff):
                data = data + buff
            else:
                break
        sock.close()
        return data
    except:
        print '\nError: Invalid administrative host -- Administrative access denied.'
        print 'Exiting Netuse Administration Command Line Interface'
        print '=' * 80
        raise SystemExit

################################################################################
# Dataprint fucntion
# 
# Usage:       dataprint(data, hostprint)
#
# Purpose:     To print out the results of a Netuse Administration command
#
# Arguments:   String (data) of raw information received from the Netuse server
#              and Boolean true (hostprint) if comman 'list' was invoked
#
###############################################################################
def dataprint(data, hostprint):
    if hostprint & (not data.startswith('Invalid')):
        print '\nHost name            Type and Model       Location               Class   Status'
        print '-------------------- -------------------  --------------------  -------  ------'
        machines = []
        for d in data.splitlines(False):
            machines = machines + [machine(d)]
        for m in machines:
            print '%-20.20s %-6s%-14s  %-20.20s  %7s %6s' % (m.host, m.plat, m.model, m.loc, m.ctype, m.status)
        print
    else:
        print '\n%s' % data

################################################################################
# Use function
#
# Usage:       use(filename)
#
# Purpose:     To open a command file and act as the main driver for the
#              for the execution of the commands in 'filename'
#
# Arguments:   Name of the comman file
#
# Calls:       execute()
#
###############################################################################
def use(filename):
    try: handle = open(filename, mode='r')
    except IOError, err:
        print '\nError opening %r for input. Command aborted.\n' % err.filename
        return
    for line in handle:
        print 'Executing: %s' % line.strip('\n')
        done = execute(line)
        if done:
            break
    handle.close()
################################################################################
# ListCommand function
#
# Usage:       printhosts, data = listcommand(arguments)
#
# Purpose:     To perform the list command. It parses the options and arguments
#              passed to it and filters the results of the list command to match
#              the arguments passsed to it.
#
# Arguments:   Command line arguments and options for the list command
#
# Returns:     Boolean true and host data if data is received successfully from 
#              the netuse server. Boolean false and an empty string if the
#              request did not return any results
#
# Calls:       request()
#
################################################################################
def listcommand(arguments):
    p = optparse.OptionParser(usage='Usage: list [<vendor>] [L|P] [options]')
    p.add_option('--host', action='store', default='', type='string',
                 help='List only machines matching HOST')
    p.add_option('-l', '--location', action='store', default='', type='string',
                 help='List only machines matching LOCATION')
    p.add_option('-m', '--model', action='store', default='', type='string',
                 help='List only machines matching MODEL')
    p.add_option('-s', '--search', action='store', default='', type='string',
                 help='Search for models matching SEARCH in any catagory')
    p.add_option('-t', '--type', action='store', type='string',
                 default='', help='List only machines matching TYPE')
    try:
        options, arguments = p.parse_args(arguments.split())
    except SystemExit:
        return False, ''
    data = request('NUADMIN LST ' + ' '.join(arguments))
    data = data.replace('XP','WIN')
    data = data.replace('LINU', 'LINUX')
    newdata = []
    if options.model:
        for d in data.splitlines(False):
            try: 
                if d.split(':')[2].upper().find(options.model.upper()) > -1:
                    newdata = newdata + [d]
            except IndexError:
                pass
        data = '\n'.join(newdata)
    del newdata
    newdata = []
    if options.type:
        for d in data.splitlines(False):
            try:
                if d.split(':')[1].upper().find(options.type.upper()) > -1:
                    newdata = newdata + [d]
            except IndexError:
                pass
        data = '\n'.join(newdata)
    del newdata
    newdata = []
    if options.host:
        for d in data.splitlines(False):
            try:
                if d.split(':')[0].upper().find(options.host.upper()) > -1:
                    newdata = newdata + [d]
            except IndexError:
                pass
        data = '\n'.join(newdata)
    del newdata
    newdata = []
    if options.location:
        try:
            for d in data.splitlines(False):
                if d.split(':')[12].upper().find(options.location.upper()) > -1:
                    newdata = newdata + [d]
        except IndexError:
            pass
        data = '\n'.join(newdata)
    del newdata
    newdata = []
    if options.search:
        for d in data.splitlines(False):
            if d.upper().find(options.search.upper()) > -1:
                newdata = newdata + [d]
        data = '\n'.join(newdata)
    del newdata
    return True, data




################################################################################
# Execute function
#
# Usage:       donewithsession = execute(command)
#
# Purpose:     To parse a command string, determine the command, and to call
#              the appropriate driver.
#
# Arguments:   The command string
#
# Returns:     Boolean true if command string contains the quit command...
#              Otherwise returns false
#
# Calls:       help, request, use, dataprint
#
################################################################################
def execute(command):
    cmdar = command.split()
    lst = False
    data = ''
    if len(cmdar):
        if (cmdar[0].upper() == 'EXIT') | (cmdar[0].upper() == 'QUIT'):
            print '=' * 80
            return True
        elif (cmdar[0].upper() == 'HELP') | (cmdar[0] == '?'):
            Help()
        elif cmdar[0].upper() == 'ADD':
            del cmdar[0]
            command = 'NUADMIN ADD %s' % ' '.join(cmdar)
            data = request(command)
        elif cmdar[0].upper() == 'LIST':
            lst, data = listcommand(' '.join(cmdar[1:]))
        elif cmdar[0].upper() == 'DELETE':
            del cmdar[0]
            command = 'NUADMIN DEL ' + ' '.join(cmdar)
            data = request(command)
        elif cmdar[0].upper() == 'LOCATION':
            del cmdar[0]
            command = 'NUADMIN LOC ' + ' '.join(cmdar)
            data = request(command)
        elif cmdar[0].upper() == 'RELOAD':
            del cmdar[0]
            command = 'NUADMIN REL ' + ' '.join(cmdar)
            data = request(command)
        elif cmdar[0].upper() == 'SAVESTATE':
            del cmdar[0]
            command = 'NUADMIN SAV ' + ' '.join(cmdar)
            data = request(command)
        elif cmdar[0].upper() == 'USE':
            if len(cmdar) == 2:
                use(cmdar[1])
            else:
                print '\nInvalid number of arguments.\n'
        else:
            print '\nInvalid command. Type \'?\' or \'help\' to receive a list of valid commands.\n'
        if len(data):
            dataprint(data, lst)
    return False
        
################################################################################
# Main Program
print '=' * 80
print 'Netuse Administration Command Line Interface'
print '=' * 80
print
done = False
while not done:
    command = raw_input('NUADMIN> ')
    done = execute(command)
